//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Article`.
    static let article = _R.storyboard.article()
    /// Storyboard `Filter`.
    static let filter = _R.storyboard.filter()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `More`.
    static let more = _R.storyboard.more()
    /// Storyboard `News`.
    static let news = _R.storyboard.news()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Article", bundle: ...)`
    static func article(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.article)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Filter", bundle: ...)`
    static func filter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.filter)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "More", bundle: ...)`
    static func more(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.more)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "News", bundle: ...)`
    static func news(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.news)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `backgroundGrey`.
    static let backgroundGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundGrey")
    /// Color `grey2`.
    static let grey2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "grey2")
    /// Color `sacoBlue`.
    static let sacoBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "sacoBlue")
    /// Color `shadowColor`.
    static let shadowColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "shadowColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundGrey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundGrey, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "grey2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func grey2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.grey2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "sacoBlue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func sacoBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.sacoBlue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "shadowColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadowColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadowColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "backgroundGrey", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func backgroundGrey(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.backgroundGrey.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "grey2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func grey2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.grey2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "sacoBlue", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func sacoBlue(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.sacoBlue.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "shadowColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadowColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadowColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 23 files.
  struct file {
    /// Resource file `MuseoModerno-VariableFont_wght.ttf`.
    static let museoModernoVariableFont_wghtTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoModerno-VariableFont_wght", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-100.ttf`.
    static let museoSansCyrl100Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-100", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-100Italic.ttf`.
    static let museoSansCyrl100ItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-100Italic", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-300.ttf`.
    static let museoSansCyrl300Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-300", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-300Italic.ttf`.
    static let museoSansCyrl300ItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-300Italic", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-500.ttf`.
    static let museoSansCyrl500Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-500", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-500Italic.ttf`.
    static let museoSansCyrl500ItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-500Italic", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-700.ttf`.
    static let museoSansCyrl700Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-700", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-700Italic.ttf`.
    static let museoSansCyrl700ItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-700Italic", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-900.ttf`.
    static let museoSansCyrl900Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-900", pathExtension: "ttf")
    /// Resource file `MuseoSansCyrl-900Italic.ttf`.
    static let museoSansCyrl900ItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "MuseoSansCyrl-900Italic", pathExtension: "ttf")
    /// Resource file `OpenSans-Bold.ttf`.
    static let openSansBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Bold", pathExtension: "ttf")
    /// Resource file `OpenSans-BoldItalic.ttf`.
    static let openSansBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-BoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBold.ttf`.
    static let openSansExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBold", pathExtension: "ttf")
    /// Resource file `OpenSans-ExtraBoldItalic.ttf`.
    static let openSansExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Italic.ttf`.
    static let openSansItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Italic", pathExtension: "ttf")
    /// Resource file `OpenSans-Light.ttf`.
    static let openSansLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Light", pathExtension: "ttf")
    /// Resource file `OpenSans-LightItalic.ttf`.
    static let openSansLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-LightItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Medium.ttf`.
    static let openSansMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Medium", pathExtension: "ttf")
    /// Resource file `OpenSans-MediumItalic.ttf`.
    static let openSansMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-MediumItalic", pathExtension: "ttf")
    /// Resource file `OpenSans-Regular.ttf`.
    static let openSansRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-Regular", pathExtension: "ttf")
    /// Resource file `OpenSans-SemiBold.ttf`.
    static let openSansSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-SemiBold", pathExtension: "ttf")
    /// Resource file `OpenSans-SemiBoldItalic.ttf`.
    static let openSansSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "OpenSans-SemiBoldItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "MuseoModerno-VariableFont_wght", withExtension: "ttf")`
    static func museoModernoVariableFont_wghtTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoModernoVariableFont_wghtTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-100", withExtension: "ttf")`
    static func museoSansCyrl100Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl100Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-100Italic", withExtension: "ttf")`
    static func museoSansCyrl100ItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl100ItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-300", withExtension: "ttf")`
    static func museoSansCyrl300Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl300Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-300Italic", withExtension: "ttf")`
    static func museoSansCyrl300ItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl300ItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-500", withExtension: "ttf")`
    static func museoSansCyrl500Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl500Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-500Italic", withExtension: "ttf")`
    static func museoSansCyrl500ItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl500ItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-700", withExtension: "ttf")`
    static func museoSansCyrl700Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl700Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-700Italic", withExtension: "ttf")`
    static func museoSansCyrl700ItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl700ItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-900", withExtension: "ttf")`
    static func museoSansCyrl900Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl900Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "MuseoSansCyrl-900Italic", withExtension: "ttf")`
    static func museoSansCyrl900ItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.museoSansCyrl900ItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Bold", withExtension: "ttf")`
    static func openSansBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-BoldItalic", withExtension: "ttf")`
    static func openSansBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBold", withExtension: "ttf")`
    static func openSansExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-ExtraBoldItalic", withExtension: "ttf")`
    static func openSansExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Italic", withExtension: "ttf")`
    static func openSansItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Light", withExtension: "ttf")`
    static func openSansLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-LightItalic", withExtension: "ttf")`
    static func openSansLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Medium", withExtension: "ttf")`
    static func openSansMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-MediumItalic", withExtension: "ttf")`
    static func openSansMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-Regular", withExtension: "ttf")`
    static func openSansRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-SemiBold", withExtension: "ttf")`
    static func openSansSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "OpenSans-SemiBoldItalic", withExtension: "ttf")`
    static func openSansSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.openSansSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 23 fonts.
  struct font: Rswift.Validatable {
    /// Font `MuseoModerno-Thin`.
    static let museoModernoThin = Rswift.FontResource(fontName: "MuseoModerno-Thin")
    /// Font `MuseoSansCyrl-100Italic`.
    static let museoSansCyrl100Italic = Rswift.FontResource(fontName: "MuseoSansCyrl-100Italic")
    /// Font `MuseoSansCyrl-100`.
    static let museoSansCyrl100 = Rswift.FontResource(fontName: "MuseoSansCyrl-100")
    /// Font `MuseoSansCyrl-300Italic`.
    static let museoSansCyrl300Italic = Rswift.FontResource(fontName: "MuseoSansCyrl-300Italic")
    /// Font `MuseoSansCyrl-300`.
    static let museoSansCyrl300 = Rswift.FontResource(fontName: "MuseoSansCyrl-300")
    /// Font `MuseoSansCyrl-500Italic`.
    static let museoSansCyrl500Italic = Rswift.FontResource(fontName: "MuseoSansCyrl-500Italic")
    /// Font `MuseoSansCyrl-500`.
    static let museoSansCyrl500 = Rswift.FontResource(fontName: "MuseoSansCyrl-500")
    /// Font `MuseoSansCyrl-700Italic`.
    static let museoSansCyrl700Italic = Rswift.FontResource(fontName: "MuseoSansCyrl-700Italic")
    /// Font `MuseoSansCyrl-700`.
    static let museoSansCyrl700 = Rswift.FontResource(fontName: "MuseoSansCyrl-700")
    /// Font `MuseoSansCyrl-900Italic`.
    static let museoSansCyrl900Italic = Rswift.FontResource(fontName: "MuseoSansCyrl-900Italic")
    /// Font `MuseoSansCyrl-900`.
    static let museoSansCyrl900 = Rswift.FontResource(fontName: "MuseoSansCyrl-900")
    /// Font `OpenSans-BoldItalic`.
    static let openSansBoldItalic = Rswift.FontResource(fontName: "OpenSans-BoldItalic")
    /// Font `OpenSans-Bold`.
    static let openSansBold = Rswift.FontResource(fontName: "OpenSans-Bold")
    /// Font `OpenSans-ExtraBoldItalic`.
    static let openSansExtraBoldItalic = Rswift.FontResource(fontName: "OpenSans-ExtraBoldItalic")
    /// Font `OpenSans-ExtraBold`.
    static let openSansExtraBold = Rswift.FontResource(fontName: "OpenSans-ExtraBold")
    /// Font `OpenSans-Italic`.
    static let openSansItalic = Rswift.FontResource(fontName: "OpenSans-Italic")
    /// Font `OpenSans-LightItalic`.
    static let openSansLightItalic = Rswift.FontResource(fontName: "OpenSans-LightItalic")
    /// Font `OpenSans-Light`.
    static let openSansLight = Rswift.FontResource(fontName: "OpenSans-Light")
    /// Font `OpenSans-MediumItalic`.
    static let openSansMediumItalic = Rswift.FontResource(fontName: "OpenSans-MediumItalic")
    /// Font `OpenSans-Medium`.
    static let openSansMedium = Rswift.FontResource(fontName: "OpenSans-Medium")
    /// Font `OpenSans-Regular`.
    static let openSansRegular = Rswift.FontResource(fontName: "OpenSans-Regular")
    /// Font `OpenSans-SemiBoldItalic`.
    static let openSansSemiBoldItalic = Rswift.FontResource(fontName: "OpenSans-SemiBoldItalic")
    /// Font `OpenSans-SemiBold`.
    static let openSansSemiBold = Rswift.FontResource(fontName: "OpenSans-SemiBold")

    /// `UIFont(name: "MuseoModerno-Thin", size: ...)`
    static func museoModernoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoModernoThin, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-100", size: ...)`
    static func museoSansCyrl100(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl100, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-100Italic", size: ...)`
    static func museoSansCyrl100Italic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl100Italic, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-300", size: ...)`
    static func museoSansCyrl300(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl300, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-300Italic", size: ...)`
    static func museoSansCyrl300Italic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl300Italic, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-500", size: ...)`
    static func museoSansCyrl500(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl500, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-500Italic", size: ...)`
    static func museoSansCyrl500Italic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl500Italic, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-700", size: ...)`
    static func museoSansCyrl700(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl700, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-700Italic", size: ...)`
    static func museoSansCyrl700Italic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl700Italic, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-900", size: ...)`
    static func museoSansCyrl900(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl900, size: size)
    }

    /// `UIFont(name: "MuseoSansCyrl-900Italic", size: ...)`
    static func museoSansCyrl900Italic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: museoSansCyrl900Italic, size: size)
    }

    /// `UIFont(name: "OpenSans-Bold", size: ...)`
    static func openSansBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBold, size: size)
    }

    /// `UIFont(name: "OpenSans-BoldItalic", size: ...)`
    static func openSansBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraBold", size: ...)`
    static func openSansExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraBold, size: size)
    }

    /// `UIFont(name: "OpenSans-ExtraBoldItalic", size: ...)`
    static func openSansExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Italic", size: ...)`
    static func openSansItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Light", size: ...)`
    static func openSansLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLight, size: size)
    }

    /// `UIFont(name: "OpenSans-LightItalic", size: ...)`
    static func openSansLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansLightItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Medium", size: ...)`
    static func openSansMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansMedium, size: size)
    }

    /// `UIFont(name: "OpenSans-MediumItalic", size: ...)`
    static func openSansMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansMediumItalic, size: size)
    }

    /// `UIFont(name: "OpenSans-Regular", size: ...)`
    static func openSansRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansRegular, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiBold", size: ...)`
    static func openSansSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiBold, size: size)
    }

    /// `UIFont(name: "OpenSans-SemiBoldItalic", size: ...)`
    static func openSansSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: openSansSemiBoldItalic, size: size)
    }

    static func validate() throws {
      if R.font.museoModernoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoModerno-Thin' could not be loaded, is 'MuseoModerno-VariableFont_wght.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl100(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-100' could not be loaded, is 'MuseoSansCyrl-100.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl100Italic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-100Italic' could not be loaded, is 'MuseoSansCyrl-100Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl300(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-300' could not be loaded, is 'MuseoSansCyrl-300.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl300Italic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-300Italic' could not be loaded, is 'MuseoSansCyrl-300Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl500(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-500' could not be loaded, is 'MuseoSansCyrl-500.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl500Italic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-500Italic' could not be loaded, is 'MuseoSansCyrl-500Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl700(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-700' could not be loaded, is 'MuseoSansCyrl-700.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl700Italic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-700Italic' could not be loaded, is 'MuseoSansCyrl-700Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl900(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-900' could not be loaded, is 'MuseoSansCyrl-900.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.museoSansCyrl900Italic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'MuseoSansCyrl-900Italic' could not be loaded, is 'MuseoSansCyrl-900Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Bold' could not be loaded, is 'OpenSans-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-BoldItalic' could not be loaded, is 'OpenSans-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraBold' could not be loaded, is 'OpenSans-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-ExtraBoldItalic' could not be loaded, is 'OpenSans-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Italic' could not be loaded, is 'OpenSans-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Light' could not be loaded, is 'OpenSans-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-LightItalic' could not be loaded, is 'OpenSans-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Medium' could not be loaded, is 'OpenSans-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-MediumItalic' could not be loaded, is 'OpenSans-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-Regular' could not be loaded, is 'OpenSans-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiBold' could not be loaded, is 'OpenSans-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.openSansSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'OpenSans-SemiBoldItalic' could not be loaded, is 'OpenSans-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `backArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrow")
    /// Image `bin`.
    static let bin = Rswift.ImageResource(bundle: R.hostingBundle, name: "bin")
    /// Image `calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "calendar")
    /// Image `dandruff`.
    static let dandruff = Rswift.ImageResource(bundle: R.hostingBundle, name: "dandruff")
    /// Image `filter`.
    static let filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "filter")
    /// Image `sort`.
    static let sort = Rswift.ImageResource(bundle: R.hostingBundle, name: "sort")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "backArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bin", bundle: ..., traitCollection: ...)`
    static func bin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dandruff", bundle: ..., traitCollection: ...)`
    static func dandruff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dandruff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "filter", bundle: ..., traitCollection: ...)`
    static func filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "sort", bundle: ..., traitCollection: ...)`
    static func sort(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sort, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `DateTextFieldView`.
    static let dateTextFieldView = _R.nib._DateTextFieldView()
    /// Nib `Header`.
    static let header = _R.nib._Header()
    /// Nib `NewsTableViewCell`.
    static let newsTableViewCell = _R.nib._NewsTableViewCell()
    /// Nib `SearchHistoryTableViewCell`.
    static let searchHistoryTableViewCell = _R.nib._SearchHistoryTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DateTextFieldView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dateTextFieldView) instead")
    static func dateTextFieldView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateTextFieldView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Header", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.header) instead")
    static func header(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.header)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NewsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.newsTableViewCell) instead")
    static func newsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.newsTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SearchHistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.searchHistoryTableViewCell) instead")
    static func searchHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchHistoryTableViewCell)
    }
    #endif

    static func dateTextFieldView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dateTextFieldView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func header(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.header.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func newsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsTableViewCell? {
      return R.nib.newsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsTableViewCell
    }

    static func searchHistoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHistoryTableViewCell? {
      return R.nib.searchHistoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHistoryTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `NewsCell`.
    static let newsCell: Rswift.ReuseIdentifier<NewsTableViewCell> = Rswift.ReuseIdentifier(identifier: "NewsCell")
    /// Reuse identifier `SearchHistoryCell`.
    static let searchHistoryCell: Rswift.ReuseIdentifier<SearchHistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "SearchHistoryCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DateTextFieldView.validate()
      try _Header.validate()
    }

    struct _DateTextFieldView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DateTextFieldView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in nib 'DateTextFieldView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "sacoBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'sacoBlue' is used in nib 'DateTextFieldView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _Header: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Header"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "filter", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filter' is used in nib 'Header', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sort", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sort' is used in nib 'Header', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "sacoBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'sacoBlue' is used in nib 'Header', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _NewsTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NewsTableViewCell

      let bundle = R.hostingBundle
      let identifier = "NewsCell"
      let name = "NewsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NewsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NewsTableViewCell
      }

      fileprivate init() {}
    }

    struct _SearchHistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SearchHistoryTableViewCell

      let bundle = R.hostingBundle
      let identifier = "SearchHistoryCell"
      let name = "SearchHistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SearchHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchHistoryTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try article.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try filter.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try home.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try more.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try news.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct article: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ArticleViewController

      let bundle = R.hostingBundle
      let name = "Article"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct filter: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FilterViewController

      let bundle = R.hostingBundle
      let name = "Filter"

      static func validate() throws {
        if UIKit.UIImage(named: "backArrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backArrow' is used in storyboard 'Filter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "bin", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'bin' is used in storyboard 'Filter', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundGrey", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundGrey' is used in storyboard 'Filter', but couldn't be loaded.") }
          if UIKit.UIColor(named: "grey2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'grey2' is used in storyboard 'Filter', but couldn't be loaded.") }
          if UIKit.UIColor(named: "sacoBlue", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'sacoBlue' is used in storyboard 'Filter', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = HomeViewController

      let bundle = R.hostingBundle
      let name = "Home"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct more: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MoreViewController

      let bundle = R.hostingBundle
      let name = "More"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct news: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewsViewController

      let bundle = R.hostingBundle
      let name = "News"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController

      let bundle = R.hostingBundle
      let name = "Profile"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SearchViewController

      let bundle = R.hostingBundle
      let name = "Search"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
